/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type UserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  callGasLimit: bigint,
  verificationGasLimit: bigint,
  preVerificationGas: bigint,
  maxFeePerGas: bigint,
  maxPriorityFeePerGas: bigint,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  callGasLimit: bigint;
  verificationGasLimit: bigint;
  preVerificationGas: bigint;
  maxFeePerGas: bigint;
  maxPriorityFeePerGas: bigint;
  paymasterAndData: string;
  signature: string;
};

export interface CipherAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "configureGuardians"
      | "configureGuardiansBySelf"
      | "entryPoint"
      | "execute"
      | "executeRecovery"
      | "frozen"
      | "guardianCount"
      | "guardianFreeze"
      | "guardians"
      | "isValidSignature"
      | "owner"
      | "proposeRecovery"
      | "proposeRecoveryBySelf"
      | "recoveryApproved"
      | "recoveryConfirms"
      | "recoveryDelay"
      | "recoveryNewOwner"
      | "recoveryStart"
      | "recoveryThreshold"
      | "sessionKeys"
      | "setFrozen"
      | "setFrozenBySelf"
      | "setOwner"
      | "setSessionKey"
      | "validateUserOp"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Frozen"
      | "GuardiansUpdated"
      | "OwnerChanged"
      | "RecoveryConfirmed"
      | "RecoveryExecuted"
      | "RecoveryProposed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "configureGuardians",
    values: [AddressLike[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureGuardiansBySelf",
    values: [AddressLike[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRecovery",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "frozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "guardianCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guardianFreeze",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guardians",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeRecovery",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeRecoveryBySelf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryApproved",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryConfirms",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryNewOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryStart",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sessionKeys",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setFrozen", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setFrozenBySelf",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSessionKey",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [UserOperationStruct, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "configureGuardians",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureGuardiansBySelf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "guardianCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guardianFreeze",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardians", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeRecoveryBySelf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryConfirms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sessionKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFrozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFrozenBySelf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSessionKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;
}

export namespace FrozenEvent {
  export type InputTuple = [frozen: boolean];
  export type OutputTuple = [frozen: boolean];
  export interface OutputObject {
    frozen: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GuardiansUpdatedEvent {
  export type InputTuple = [
    count: BigNumberish,
    threshold: BigNumberish,
    delay: BigNumberish
  ];
  export type OutputTuple = [count: bigint, threshold: bigint, delay: bigint];
  export interface OutputObject {
    count: bigint;
    threshold: bigint;
    delay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveryConfirmedEvent {
  export type InputTuple = [
    id: BytesLike,
    guardian: AddressLike,
    count: BigNumberish
  ];
  export type OutputTuple = [id: string, guardian: string, count: bigint];
  export interface OutputObject {
    id: string;
    guardian: string;
    count: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveryExecutedEvent {
  export type InputTuple = [id: BytesLike, newOwner: AddressLike];
  export type OutputTuple = [id: string, newOwner: string];
  export interface OutputObject {
    id: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveryProposedEvent {
  export type InputTuple = [id: BytesLike, newOwner: AddressLike];
  export type OutputTuple = [id: string, newOwner: string];
  export interface OutputObject {
    id: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CipherAccount extends BaseContract {
  connect(runner?: ContractRunner | null): CipherAccount;
  waitForDeployment(): Promise<this>;

  interface: CipherAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  configureGuardians: TypedContractMethod<
    [addrs: AddressLike[], threshold: BigNumberish, delaySeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  configureGuardiansBySelf: TypedContractMethod<
    [addrs: AddressLike[], threshold: BigNumberish, delaySeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  entryPoint: TypedContractMethod<[], [string], "view">;

  execute: TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  executeRecovery: TypedContractMethod<[id: BytesLike], [void], "nonpayable">;

  frozen: TypedContractMethod<[], [boolean], "view">;

  guardianCount: TypedContractMethod<[], [bigint], "view">;

  guardianFreeze: TypedContractMethod<[], [void], "nonpayable">;

  guardians: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isValidSignature: TypedContractMethod<
    [hash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proposeRecovery: TypedContractMethod<
    [newOwner: AddressLike],
    [string],
    "nonpayable"
  >;

  proposeRecoveryBySelf: TypedContractMethod<
    [newOwner: AddressLike],
    [string],
    "nonpayable"
  >;

  recoveryApproved: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  recoveryConfirms: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  recoveryDelay: TypedContractMethod<[], [bigint], "view">;

  recoveryNewOwner: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  recoveryStart: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  recoveryThreshold: TypedContractMethod<[], [bigint], "view">;

  sessionKeys: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  setFrozen: TypedContractMethod<[v: boolean], [void], "nonpayable">;

  setFrozenBySelf: TypedContractMethod<[v: boolean], [void], "nonpayable">;

  setOwner: TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  setSessionKey: TypedContractMethod<
    [k: AddressLike, v: boolean],
    [void],
    "nonpayable"
  >;

  validateUserOp: TypedContractMethod<
    [userOp: UserOperationStruct, userOpHash: BytesLike, arg2: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "configureGuardians"
  ): TypedContractMethod<
    [addrs: AddressLike[], threshold: BigNumberish, delaySeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "configureGuardiansBySelf"
  ): TypedContractMethod<
    [addrs: AddressLike[], threshold: BigNumberish, delaySeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "entryPoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeRecovery"
  ): TypedContractMethod<[id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "frozen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "guardianCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "guardianFreeze"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "guardians"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [hash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposeRecovery"
  ): TypedContractMethod<[newOwner: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "proposeRecoveryBySelf"
  ): TypedContractMethod<[newOwner: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "recoveryApproved"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "recoveryConfirms"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "recoveryDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recoveryNewOwner"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "recoveryStart"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "recoveryThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sessionKeys"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setFrozen"
  ): TypedContractMethod<[v: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFrozenBySelf"
  ): TypedContractMethod<[v: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSessionKey"
  ): TypedContractMethod<[k: AddressLike, v: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validateUserOp"
  ): TypedContractMethod<
    [userOp: UserOperationStruct, userOpHash: BytesLike, arg2: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "Frozen"
  ): TypedContractEvent<
    FrozenEvent.InputTuple,
    FrozenEvent.OutputTuple,
    FrozenEvent.OutputObject
  >;
  getEvent(
    key: "GuardiansUpdated"
  ): TypedContractEvent<
    GuardiansUpdatedEvent.InputTuple,
    GuardiansUpdatedEvent.OutputTuple,
    GuardiansUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "RecoveryConfirmed"
  ): TypedContractEvent<
    RecoveryConfirmedEvent.InputTuple,
    RecoveryConfirmedEvent.OutputTuple,
    RecoveryConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "RecoveryExecuted"
  ): TypedContractEvent<
    RecoveryExecutedEvent.InputTuple,
    RecoveryExecutedEvent.OutputTuple,
    RecoveryExecutedEvent.OutputObject
  >;
  getEvent(
    key: "RecoveryProposed"
  ): TypedContractEvent<
    RecoveryProposedEvent.InputTuple,
    RecoveryProposedEvent.OutputTuple,
    RecoveryProposedEvent.OutputObject
  >;

  filters: {
    "Frozen(bool)": TypedContractEvent<
      FrozenEvent.InputTuple,
      FrozenEvent.OutputTuple,
      FrozenEvent.OutputObject
    >;
    Frozen: TypedContractEvent<
      FrozenEvent.InputTuple,
      FrozenEvent.OutputTuple,
      FrozenEvent.OutputObject
    >;

    "GuardiansUpdated(uint256,uint256,uint256)": TypedContractEvent<
      GuardiansUpdatedEvent.InputTuple,
      GuardiansUpdatedEvent.OutputTuple,
      GuardiansUpdatedEvent.OutputObject
    >;
    GuardiansUpdated: TypedContractEvent<
      GuardiansUpdatedEvent.InputTuple,
      GuardiansUpdatedEvent.OutputTuple,
      GuardiansUpdatedEvent.OutputObject
    >;

    "OwnerChanged(address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "RecoveryConfirmed(bytes32,address,uint256)": TypedContractEvent<
      RecoveryConfirmedEvent.InputTuple,
      RecoveryConfirmedEvent.OutputTuple,
      RecoveryConfirmedEvent.OutputObject
    >;
    RecoveryConfirmed: TypedContractEvent<
      RecoveryConfirmedEvent.InputTuple,
      RecoveryConfirmedEvent.OutputTuple,
      RecoveryConfirmedEvent.OutputObject
    >;

    "RecoveryExecuted(bytes32,address)": TypedContractEvent<
      RecoveryExecutedEvent.InputTuple,
      RecoveryExecutedEvent.OutputTuple,
      RecoveryExecutedEvent.OutputObject
    >;
    RecoveryExecuted: TypedContractEvent<
      RecoveryExecutedEvent.InputTuple,
      RecoveryExecutedEvent.OutputTuple,
      RecoveryExecutedEvent.OutputObject
    >;

    "RecoveryProposed(bytes32,address)": TypedContractEvent<
      RecoveryProposedEvent.InputTuple,
      RecoveryProposedEvent.OutputTuple,
      RecoveryProposedEvent.OutputObject
    >;
    RecoveryProposed: TypedContractEvent<
      RecoveryProposedEvent.InputTuple,
      RecoveryProposedEvent.OutputTuple,
      RecoveryProposedEvent.OutputObject
    >;
  };
}
