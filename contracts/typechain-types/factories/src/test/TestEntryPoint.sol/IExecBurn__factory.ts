/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IExecBurn,
  IExecBurnInterface,
} from "../../../../src/test/TestEntryPoint.sol/IExecBurn";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "executeAndBurn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IExecBurn__factory {
  static readonly abi = _abi;
  static createInterface(): IExecBurnInterface {
    return new Interface(_abi) as IExecBurnInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IExecBurn {
    return new Contract(address, _abi, runner) as unknown as IExecBurn;
  }
}
