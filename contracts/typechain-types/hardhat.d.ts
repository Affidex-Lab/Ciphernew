/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSA__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "CipherAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CipherAccount__factory>;
    getContractFactory(
      name: "CipherP256Account",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CipherP256Account__factory>;
    getContractFactory(
      name: "DisposableAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DisposableAccount__factory>;
    getContractFactory(
      name: "CipherAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CipherAccountFactory__factory>;
    getContractFactory(
      name: "DisposableAccountFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DisposableAccountFactory__factory>;
    getContractFactory(
      name: "IEntryPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEntryPoint__factory>;
    getContractFactory(
      name: "IExec",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExec__factory>;
    getContractFactory(
      name: "IExecBurn",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExecBurn__factory>;
    getContractFactory(
      name: "IValidate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IValidate__factory>;
    getContractFactory(
      name: "TestEntryPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestEntryPoint__factory>;
    getContractFactory(
      name: "TestTarget",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestTarget__factory>;

    getContractAt(
      name: "IERC1271",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "ECDSA",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSA>;
    getContractAt(
      name: "SafeCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "Strings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "CipherAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CipherAccount>;
    getContractAt(
      name: "CipherP256Account",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CipherP256Account>;
    getContractAt(
      name: "DisposableAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DisposableAccount>;
    getContractAt(
      name: "CipherAccountFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CipherAccountFactory>;
    getContractAt(
      name: "DisposableAccountFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DisposableAccountFactory>;
    getContractAt(
      name: "IEntryPoint",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEntryPoint>;
    getContractAt(
      name: "IExec",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExec>;
    getContractAt(
      name: "IExecBurn",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExecBurn>;
    getContractAt(
      name: "IValidate",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IValidate>;
    getContractAt(
      name: "TestEntryPoint",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestEntryPoint>;
    getContractAt(
      name: "TestTarget",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestTarget>;

    deployContract(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Strings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "CipherAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CipherAccount>;
    deployContract(
      name: "CipherP256Account",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CipherP256Account>;
    deployContract(
      name: "DisposableAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DisposableAccount>;
    deployContract(
      name: "CipherAccountFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CipherAccountFactory>;
    deployContract(
      name: "DisposableAccountFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DisposableAccountFactory>;
    deployContract(
      name: "IEntryPoint",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEntryPoint>;
    deployContract(
      name: "IExec",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExec>;
    deployContract(
      name: "IExecBurn",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExecBurn>;
    deployContract(
      name: "IValidate",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IValidate>;
    deployContract(
      name: "TestEntryPoint",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestEntryPoint>;
    deployContract(
      name: "TestTarget",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestTarget>;

    deployContract(
      name: "IERC1271",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "ECDSA",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "SafeCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Strings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "CipherAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CipherAccount>;
    deployContract(
      name: "CipherP256Account",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CipherP256Account>;
    deployContract(
      name: "DisposableAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DisposableAccount>;
    deployContract(
      name: "CipherAccountFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CipherAccountFactory>;
    deployContract(
      name: "DisposableAccountFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DisposableAccountFactory>;
    deployContract(
      name: "IEntryPoint",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEntryPoint>;
    deployContract(
      name: "IExec",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExec>;
    deployContract(
      name: "IExecBurn",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExecBurn>;
    deployContract(
      name: "IValidate",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IValidate>;
    deployContract(
      name: "TestEntryPoint",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestEntryPoint>;
    deployContract(
      name: "TestTarget",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestTarget>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
